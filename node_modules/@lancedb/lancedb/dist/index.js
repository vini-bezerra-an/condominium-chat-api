"use strict";
// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: Copyright The LanceDB Authors
Object.defineProperty(exports, "__esModule", { value: true });
exports.packBits = exports.rerankers = exports.embedding = exports.MergeInsertBuilder = exports.Table = exports.Index = exports.Occur = exports.Operator = exports.FullTextQueryType = exports.BooleanQuery = exports.MultiMatchQuery = exports.BoostQuery = exports.PhraseQuery = exports.MatchQuery = exports.RecordBatchIterator = exports.VectorQuery = exports.QueryBase = exports.Query = exports.Session = exports.Connection = exports.VectorColumnOptions = exports.MakeArrowTableOptions = exports.makeArrowTable = exports.TagContents = exports.Tags = void 0;
exports.connect = connect;
const connection_1 = require("./connection");
const native_js_1 = require("./native.js");
var native_js_2 = require("./native.js");
Object.defineProperty(exports, "Tags", { enumerable: true, get: function () { return native_js_2.Tags; } });
Object.defineProperty(exports, "TagContents", { enumerable: true, get: function () { return native_js_2.TagContents; } });
var arrow_1 = require("./arrow");
Object.defineProperty(exports, "makeArrowTable", { enumerable: true, get: function () { return arrow_1.makeArrowTable; } });
Object.defineProperty(exports, "MakeArrowTableOptions", { enumerable: true, get: function () { return arrow_1.MakeArrowTableOptions; } });
Object.defineProperty(exports, "VectorColumnOptions", { enumerable: true, get: function () { return arrow_1.VectorColumnOptions; } });
var connection_2 = require("./connection");
Object.defineProperty(exports, "Connection", { enumerable: true, get: function () { return connection_2.Connection; } });
var native_js_3 = require("./native.js");
Object.defineProperty(exports, "Session", { enumerable: true, get: function () { return native_js_3.Session; } });
var query_1 = require("./query");
Object.defineProperty(exports, "Query", { enumerable: true, get: function () { return query_1.Query; } });
Object.defineProperty(exports, "QueryBase", { enumerable: true, get: function () { return query_1.QueryBase; } });
Object.defineProperty(exports, "VectorQuery", { enumerable: true, get: function () { return query_1.VectorQuery; } });
Object.defineProperty(exports, "RecordBatchIterator", { enumerable: true, get: function () { return query_1.RecordBatchIterator; } });
Object.defineProperty(exports, "MatchQuery", { enumerable: true, get: function () { return query_1.MatchQuery; } });
Object.defineProperty(exports, "PhraseQuery", { enumerable: true, get: function () { return query_1.PhraseQuery; } });
Object.defineProperty(exports, "BoostQuery", { enumerable: true, get: function () { return query_1.BoostQuery; } });
Object.defineProperty(exports, "MultiMatchQuery", { enumerable: true, get: function () { return query_1.MultiMatchQuery; } });
Object.defineProperty(exports, "BooleanQuery", { enumerable: true, get: function () { return query_1.BooleanQuery; } });
Object.defineProperty(exports, "FullTextQueryType", { enumerable: true, get: function () { return query_1.FullTextQueryType; } });
Object.defineProperty(exports, "Operator", { enumerable: true, get: function () { return query_1.Operator; } });
Object.defineProperty(exports, "Occur", { enumerable: true, get: function () { return query_1.Occur; } });
var indices_1 = require("./indices");
Object.defineProperty(exports, "Index", { enumerable: true, get: function () { return indices_1.Index; } });
var table_1 = require("./table");
Object.defineProperty(exports, "Table", { enumerable: true, get: function () { return table_1.Table; } });
var merge_1 = require("./merge");
Object.defineProperty(exports, "MergeInsertBuilder", { enumerable: true, get: function () { return merge_1.MergeInsertBuilder; } });
exports.embedding = require("./embedding");
exports.rerankers = require("./rerankers");
var util_1 = require("./util");
Object.defineProperty(exports, "packBits", { enumerable: true, get: function () { return util_1.packBits; } });
async function connect(uriOrOptions, options) {
    let uri;
    let finalOptions = {};
    if (typeof uriOrOptions !== "string") {
        const { uri: uri_, ...opts } = uriOrOptions;
        uri = uri_;
        finalOptions = opts;
    }
    else {
        uri = uriOrOptions;
        finalOptions = options || {};
    }
    if (!uri) {
        throw new Error("uri is required");
    }
    finalOptions = finalOptions ?? {};
    finalOptions.storageOptions = (0, connection_1.cleanseStorageOptions)(finalOptions.storageOptions);
    const nativeConn = await native_js_1.Connection.new(uri, finalOptions);
    return new connection_1.LocalConnection(nativeConn);
}
